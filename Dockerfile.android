# Multi-stage Dockerfile for Android APK Build
# This Dockerfile creates a complete Android build environment for Ionic/Capacitor apps

FROM ubuntu:22.04 AS android-builder

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Set Android environment variables
ENV ANDROID_HOME=/opt/android-sdk
ENV ANDROID_SDK_ROOT=/opt/android-sdk
ENV PATH=${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/build-tools/34.0.0
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    unzip \
    git \
    build-essential \
    python3 \
    python3-pip \
    openjdk-17-jdk \
    gradle \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 20
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# Create Android SDK directory
RUN mkdir -p ${ANDROID_HOME}/cmdline-tools

# Download and install Android Command Line Tools
RUN wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/cmdline-tools.zip \
    && unzip -q /tmp/cmdline-tools.zip -d ${ANDROID_HOME}/cmdline-tools \
    && mv ${ANDROID_HOME}/cmdline-tools/cmdline-tools ${ANDROID_HOME}/cmdline-tools/latest \
    && rm /tmp/cmdline-tools.zip

# Accept Android SDK licenses
RUN yes | sdkmanager --licenses

# Install Android SDK components
RUN sdkmanager \
    "platform-tools" \
    "platforms;android-34" \
    "build-tools;34.0.0" \
    "extras;android;m2repository" \
    "extras;google;m2repository"

# Install Capacitor CLI globally
RUN npm install -g @capacitor/cli @ionic/cli

# Set working directory
WORKDIR /app

# Copy package files first for better caching
COPY package*.json ./
COPY ionic.config.json ./
COPY capacitor.config.ts ./
COPY tsconfig*.json ./
COPY vite.config.ts ./

# Install Node.js dependencies
RUN npm ci

# Copy source code
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./

# Build the web application
RUN npm run build

# Copy Capacitor Android project
COPY android/ ./android/

# Sync Capacitor
RUN npx cap sync android

# Create build script
RUN echo '#!/bin/bash\n\
set -e\n\
echo "🚀 Starting Android APK build process..."\n\
\n\
# Navigate to android directory\n\
cd /app/android\n\
\n\
# Make gradlew executable\n\
chmod +x gradlew\n\
\n\
# Clean previous builds\n\
./gradlew clean\n\
\n\
# Generate codegen artifacts (if needed)\n\
echo "🔧 Generating React Native Codegen artifacts..."\n\
./gradlew generateCodegenArtifactsFromSchema --stacktrace || echo "⚠️ Codegen generation completed with warnings"\n\
\n\
# Build release APK\n\
echo "🔨 Building release APK..."\n\
./gradlew assembleRelease --stacktrace\n\
\n\
# Verify APK was created\n\
if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then\n\
    echo "✅ APK built successfully!"\n\
    ls -la app/build/outputs/apk/release/\n\
else\n\
    echo "❌ APK build failed!"\n\
    exit 1\n\
fi\n\
' > /build-apk.sh && chmod +x /build-apk.sh

# Default command
CMD ["/build-apk.sh"]

# Development stage with volume mounts
FROM android-builder AS android-dev

# Install additional development tools
RUN apt-get update && apt-get install -y \
    vim \
    nano \
    htop \
    && rm -rf /var/lib/apt/lists/*

# Create entrypoint for development
RUN echo '#!/bin/bash\n\
echo "🔧 Android Development Environment Ready!"\n\
echo "📍 Android SDK: $ANDROID_HOME"\n\
echo "📍 Java Home: $JAVA_HOME"\n\
echo "📍 Node Version: $(node --version)"\n\
echo "📍 npm Version: $(npm --version)"\n\
echo "📍 Capacitor Version: $(npx cap --version)"\n\
echo ""\n\
echo "Available commands:"\n\
echo "  /build-apk.sh     - Build release APK"\n\
echo "  npm run dev       - Start development server"\n\
echo "  npx cap run android - Run on Android device/emulator"\n\
echo ""\n\
exec "$@"\n\
' > /entrypoint.sh && chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]
