name: üê≥ Docker-based APK Release

on:
  pull_request:
    types: [closed, labeled]
    branches: [main]

permissions:
  contents: write # For pushing commits and tags
  pull-requests: read # For reading PR information

jobs:
  check-docker-release-trigger:
    if: github.event.pull_request.merged == true || (github.event.action == 'labeled' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      version-bump: ${{ steps.check.outputs.version-bump }}
      release-notes: ${{ steps.check.outputs.release-notes }}
    steps:
      - name: Check Docker Release Trigger
        id: check
        run: |
          # Check if PR has docker-release label or [docker-release] in title
          LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          ACTION="${{ github.event.action }}"

          echo "Action: $ACTION"
          echo "Checking labels: $LABELS"
          echo "Checking title: $TITLE"
          echo "PR merged: ${{ github.event.pull_request.merged }}"

          # Determine version bump type from commit messages and PR title
          VERSION_BUMP="patch"
          if [[ "$TITLE" == *"[major]"* ]] || [[ "$TITLE" == *"BREAKING CHANGE"* ]]; then
            VERSION_BUMP="major"
          elif [[ "$TITLE" == *"[minor]"* ]] || [[ "$TITLE" == *"feat"* ]] || [[ "$TITLE" == *"feature"* ]]; then
            VERSION_BUMP="minor"
          fi

          # Check if should release with Docker
          SHOULD_RELEASE=false
          if [[ "$LABELS" == *"docker-release"* ]] || [[ "$TITLE" == *"[docker-release]"* ]]; then
            SHOULD_RELEASE=true
          fi

          # Special handling for label events - check if docker-release label was just added
          if [[ "$ACTION" == "labeled" ]]; then
            ADDED_LABEL="${{ github.event.label.name }}"
            echo "Label added: $ADDED_LABEL"
            if [[ "$ADDED_LABEL" != "docker-release" ]]; then
              echo "Label '$ADDED_LABEL' is not a docker-release trigger, skipping..."
              SHOULD_RELEASE=false
            fi
          fi

          # Prepare release notes from PR body
          RELEASE_NOTES=$(echo "$PR_BODY" | head -n 20)

          echo "should-release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "version-bump=$VERSION_BUMP" >> $GITHUB_OUTPUT
          echo "release-notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  docker-build-and-release:
    needs: check-docker-release-trigger
    if: needs.check-docker-release-trigger.outputs.should-release == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: üèóÔ∏è Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üîç Check for Existing Release
        id: check-existing
        run: |
          # Get current version first
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          BUMP_TYPE="${{ needs.check-docker-release-trigger.outputs.version-bump }}"

          # Parse current version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Calculate new version
          case $BUMP_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          DOCKER_TAG="v$NEW_VERSION-docker"

          # Check if Docker tag already exists
          if git rev-parse "$DOCKER_TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Docker tag $DOCKER_TAG already exists!"
            echo "existing=true" >> $GITHUB_OUTPUT
            
            # Check if GitHub release exists
            RELEASE_EXISTS=$(gh release view "$DOCKER_TAG" >/dev/null 2>&1 && echo "true" || echo "false")
            echo "github-release-exists=$RELEASE_EXISTS" >> $GITHUB_OUTPUT
            echo "skip-build=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No existing Docker release found for $DOCKER_TAG"
            echo "existing=false" >> $GITHUB_OUTPUT
            echo "github-release-exists=false" >> $GITHUB_OUTPUT
            echo "skip-build=false" >> $GITHUB_OUTPUT
          fi

          echo "docker-tag=$DOCKER_TAG" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üîß Set up Docker Buildx
        if: steps.check-existing.outputs.skip-build == 'false'
        uses: docker/setup-buildx-action@v3

      - name: üìù Update Version in Files
        if: steps.check-existing.outputs.skip-build == 'false'
        run: |
          NEW_VERSION="${{ steps.check-existing.outputs.new-version }}"

          # Update package.json (install Node.js first)
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          npm version $NEW_VERSION --no-git-tag-version

          # Update Android versionName and versionCode
          VERSION_CODE=$(grep "versionCode" android/app/build.gradle | grep -o '[0-9]\+')
          NEW_VERSION_CODE=$((VERSION_CODE + 1))

          sed -i "s/versionCode $VERSION_CODE/versionCode $NEW_VERSION_CODE/" android/app/build.gradle
          sed -i "s/versionName \".*\"/versionName \"$NEW_VERSION\"/" android/app/build.gradle

          echo "Updated version to $NEW_VERSION (code: $NEW_VERSION_CODE)"

      - name: ‚ö†Ô∏è Docker Release Already Exists
        if: steps.check-existing.outputs.skip-build == 'true'
        run: |
          echo "## ‚ö†Ô∏è Docker Release Already Exists"
          echo "A Docker release for this version already exists. Skipping build to prevent duplicates."
          echo "If you need to rebuild, please:"
          echo "1. Delete the existing tag and release, OR"
          echo "2. Increment the version manually and re-trigger"

      - name: üîë Setup Keystore in Container
        if: steps.check-existing.outputs.skip-build == 'false'
        run: |
          # Create keystore files that will be mounted into the container
          mkdir -p .docker-build
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 -d > .docker-build/release-key.jks

          # Create keystore.properties
          cat > .docker-build/keystore.properties << EOF
          storeFile=release-key.jks
          storePassword=${{ secrets.RELEASE_STORE_PASSWORD }}
          keyAlias=${{ secrets.RELEASE_KEY_ALIAS }}
          keyPassword=${{ secrets.RELEASE_KEY_PASSWORD }}
          EOF

      - name: üê≥ Build Android Docker Image
        if: steps.check-existing.outputs.skip-build == 'false'
        run: |
          echo "üê≥ Building Android Docker image..."
          docker build -f Dockerfile.android -t govt-invoice-android:latest .

          echo "‚úÖ Docker image built successfully!"
          docker images govt-invoice-android:latest

      - name: üî® Build APK using Docker
        if: steps.check-existing.outputs.skip-build == 'false'
        run: |
          echo "üî® Building APK using Docker container..."

          # Create output directory
          mkdir -p ./docker-outputs

          # Run Docker container to build APK
          docker run --rm \
            -v $(pwd)/.docker-build/release-key.jks:/app/android/app/release-key.jks:ro \
            -v $(pwd)/.docker-build/keystore.properties:/app/android/keystore.properties:ro \
            -v $(pwd)/docker-outputs:/app/android/app/build/outputs \
            --name apk-builder \
            govt-invoice-android:latest

          # Verify APK was created
          if [ ! -f "docker-outputs/apk/release/app-release.apk" ]; then
            echo "‚ùå Docker APK build failed!"
            echo "Container logs:"
            docker logs apk-builder || echo "No container logs available"
            exit 1
          fi

          # Rename APK with version
          NEW_VERSION="${{ steps.check-existing.outputs.new-version }}"
          cp docker-outputs/apk/release/app-release.apk docker-outputs/apk/release/Govt-Invoice-Docker-v${NEW_VERSION}.apk

          # Get APK info
          APK_SIZE=$(du -h docker-outputs/apk/release/Govt-Invoice-Docker-v${NEW_VERSION}.apk | cut -f1)
          echo "‚úÖ Docker APK built successfully! Size: $APK_SIZE"

          # List all output files
          echo "üìÅ Build outputs:"
          find docker-outputs -name "*.apk" -o -name "*.aab" | sort

      - name: üè∑Ô∏è Create Docker Git Tag
        if: steps.check-existing.outputs.skip-build == 'false'
        run: |
          DOCKER_TAG="${{ steps.check-existing.outputs.docker-tag }}"
          NEW_VERSION="${{ steps.check-existing.outputs.new-version }}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add package.json android/app/build.gradle
          git commit -m "üê≥ Docker Release version $DOCKER_TAG"
          git tag -a "$DOCKER_TAG" -m "Docker Release version $DOCKER_TAG"
          git push origin main
          git push origin "$DOCKER_TAG"

      - name: üìù Generate Docker Release Notes
        if: steps.check-existing.outputs.skip-build == 'false'
        id: release-notes
        run: |
          NEW_VERSION="${{ steps.check-existing.outputs.new-version }}"
          DOCKER_TAG="${{ steps.check-existing.outputs.docker-tag }}"

          # Create comprehensive release notes
          cat > docker-release-notes.md << EOF
          ## üê≥ Docker-built Release $DOCKER_TAG

          ### üìã Changes from PR #${{ github.event.pull_request.number }}
          **${{ github.event.pull_request.title }}**

          ${{ needs.check-docker-release-trigger.outputs.release-notes }}

          ### üê≥ Docker Build Information
          - **Release Version:** $NEW_VERSION
          - **Docker Tag:** $DOCKER_TAG
          - **Version Bump:** ${{ needs.check-docker-release-trigger.outputs.version-bump }}
          - **Build Method:** Docker Container
          - **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Commit SHA:** ${{ github.sha }}

          ### üíª Installation
          1. Download the APK file below (Docker-built)
          2. Enable "Install from Unknown Sources" in Android settings
          3. Install the APK on your device

          ### üê≥ Docker Build Details
          - **Base Image:** Ubuntu 22.04
          - **Android SDK:** Latest
          - **Java Version:** OpenJDK 17
          - **Node.js Version:** 20.x
          - **Build Environment:** Containerized

          ### üîß Technical Details
          - **Min SDK:** 21 (Android 5.0)
          - **Target SDK:** 34 (Android 14)
          - **Architecture:** Universal APK
          - **Signed:** Yes ‚úÖ
          - **Build Method:** Docker Container

          ### üöÄ Why Docker Build?
          - **Reproducible:** Same build environment every time
          - **Isolated:** No conflicts with host system
          - **Consistent:** All dependencies managed in container
          - **Portable:** Can be built on any Docker-capable system

          ---
          *This release was automatically generated using Docker by GitHub Actions*
          EOF

          echo "Docker release notes generated successfully"

      - name: üéâ Create Docker GitHub Release
        if: steps.check-existing.outputs.skip-build == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.check-existing.outputs.docker-tag }}
          name: üê≥ Govt-Invoice ${{ steps.check-existing.outputs.docker-tag }} (Docker Build)
          body_path: docker-release-notes.md
          files: |
            docker-outputs/apk/release/Govt-Invoice-Docker-v${{ steps.check-existing.outputs.new-version }}.apk
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üßπ Cleanup Docker Build
        if: always()
        run: |
          # Remove sensitive files
          rm -rf .docker-build
          rm -rf docker-outputs

          # Clean up Docker images
          docker rmi govt-invoice-android:latest || echo "Docker image already removed"
          docker system prune -f || echo "Docker cleanup completed"

          echo "üßπ Docker cleanup completed"

      - name: üì± Post-Docker-Release Summary
        if: steps.check-existing.outputs.skip-build == 'false'
        run: |
          NEW_VERSION="${{ steps.check-existing.outputs.new-version }}"
          DOCKER_TAG="${{ steps.check-existing.outputs.docker-tag }}"

          echo "## üê≥ Docker Release Summary"
          echo "‚úÖ **Version:** $NEW_VERSION"
          echo "‚úÖ **Docker Tag:** $DOCKER_TAG"
          echo "‚úÖ **Build Method:** Docker Container"
          echo "‚úÖ **Release URL:** ${{ github.server_url }}/${{ github.repository }}/releases/tag/$DOCKER_TAG"
          echo "‚úÖ **Status:** Successfully Released with Docker!"

  notify-docker-failure:
    needs: [check-docker-release-trigger, docker-build-and-release]
    if: failure() && needs.check-docker-release-trigger.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: üì¢ Notify Docker Build Failure
        run: |
          echo "‚ùå Docker release build failed for PR #${{ github.event.pull_request.number }}"
          echo "Please check the workflow logs and fix the Docker build issues."
          echo "Common issues:"
          echo "- Docker image build failures"
          echo "- Container permission issues"
          echo "- Missing Android dependencies in container"
          echo "- Keystore configuration problems"
